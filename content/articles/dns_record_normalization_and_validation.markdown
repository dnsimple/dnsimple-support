---
title: DNS record normalization and validation policies
excerpt: This article contains details about how we normalize and validate DNS records.
categories:
- DNS
---

# DNS record normalization and validation policies

DNSimple is continuously working to enhance our adoption of industry-standards, which includes how we ingest, store, and serve all the DNS records in our system. This involves processes such as:
- Normalizing DNS record material to provided by our customers, coming from third-party systems, or automatically generated by our system to make them compliant with the industry-standard formats and semantics we support.
- Validating DNS record material to prevent duplicated or invalid records to be stored in our system.
- Providing meaningful feedback so that our users can understand what's wrong and fix it when our system can't take a safe decision.

Normalization and validation varies depending on the DNS record type, and this article explains how we address this based on it. 

## TXT records

TXT records are used to provide the ability to associate text with a zone to meet a wide range of purposes. 

<note>
**TL;DR**: The content must be wrapped in `"`, and inner `"` must be escaped with `\"` (we will do it for you if needed). Text wrapped in `"` can't be longer than 255 (including the `"` characters), but you can concatenate all for longer TXT records.
</note>

### Validations

**The content must be wrapped in double quotes `"`**

Even though the relevant RFCs allow unwrapped values when they don't include whitespace characters, we enforce double quote `"` wrapped contents for better interoperability and to reduce the number of corner cases to consider.

Since the content must be wrapped in double quotes `"`, any double quote `"` characters in it must be escaped with the `\"` sequence. Note that the backslash doesn't have a special meaning otherwise `\` and can be freely used.

**Wrapped text can't be longer than 255 characters**

That's including the double quote `"` wrappers. However, many wrapped texts can be concatenated to achieve longer TXT records. No separator character is needed. 

<info>
Example of a valid 410 characters long TXT record content:

```
"v=DKIM1;t=s;p=MIIBIjANBgkqhkiG9w0BAQEFAAOCAQ8AMIIBCgKCAQEAr1vE7K6XAXKtID2wSBKpHW1cBCghiYvmry5vhYLySPltIpvYvzl5WGAgFTCcOF2QO8BLYvoihjr0oC84LjVt7xO3ZUaG3my3wWQcF0WObJwADl/GawBuum/4lcbJmlLHnqetfGR37WUG+t0NKK+Cz4xRkdtgYPZMYpmNirlhIwHWSNftqD6XI5DEA0LtwCb4gMa""hkWIKhTuukrVoYh58x7vI7g22AHheo+eypvcjx0SrQn9JnoVuL4mEin9FaSaLOGUah842fy3e21LOdB++yDxER4pha2hbpJHU5imcltOlsILPL1bvRlDaL9ZeN/Yjjyf3ZLEE0hgo94rrnXzM/QIDAQAB"
```
</info>

### Normalizations

Our system will add the double quote `"` wrapper when you provide a TXT content without it. While doing that, we will also escape any double quote `"` characters in the original TXT content.

If the TXT content you provide is already wrapped in double quotes `"`, we won't perform any change on it and validations will be executed on it verbatim.

<info>
Examples:
- `foo bar` turns into `"foo bar"`
- `foo "bar" baz` turns into `"foo \"bar\" baz"`
</info>

#### References

The reference document for TXT record validations is the [RFC 1035](https://www.rfc-editor.org/rfc/rfc1035), sections `3.3`, `3.3.14`, and `5.1`

## SPF records

SPF records are used to indicate to mail exchanges which hosts are authorized to send mail for a domain. Read more about it at [our article about SPF records](/articles/spf-record/).

<note>
**TL;DR**: Everything on [TXT records](#txt-records) apply to SPF records. On top of that, we will validate the directives and modifiers in the terms you provide.
</note>

### Validations

SPF records are built on top of TXT records, so all [TXT record validations](#validations) apply to SPF records as well.

On top of that, we will validate the directives and modifiers you provide through the terms in your SPF content. Each term must be either a `directive` or a `modifiers`. Terms are separated by a whitespace.

#### Directives

- A `directive` can start with a qualifier character. The supported qualifiers are: `+`, `-`, `?`, and `~`
- A `directive` is composed of a `mechanism` and and optional `value` (some `mechanism`s allow providing a value after a `:` character)
- This is the list of allowed `mechanism`s and their expected `value`s if any: 
  - `all`
  - `include`, `exists`. Expects a domain name as `value`
  - `ip4`. Expects an IPv4 address as `value`
  - `ip6`. Expects an IPv6 address as `value`
  - `ptr`. Expects a domain name as `value`
  - `a`, `mx`. Expects either a domain name or a CIDR as `value`

#### Modifiers

- `modifier` terms follow a `key=value` pattern
- A `modifier` key can be any valid text excluding the whitespace character
- A `modifier` value is expected to be a domain name

### Normalizations

Since SPF records are built on top of TXT records, all [TXT record normalizations](#normalizations) apply to SPF records as well.

No extra normalizations are performed on top of that.

<info>
Example: `v=spf1 ~all` turns into `"v=spf1 ~all"`
</info>

### References

Even though SPF records are being officially replaced by TXT records, some providers still rely on them. To make the transition to TXT records as smooth as possible, the industry has decided to make it explicit and [RFC 7208](https://www.rfc-editor.org/rfc/rfc7208) would be the reference document in this case (sections `3`, `3.1`, `4.6.1`, `4.6.2`, and `4.6.3`)

## CAA records

CAA records are use to set restrictions to the SSL certificates that can be issued for domain names. Read more about it at [our article about CAA records](/articles/caa-record/).

The general format of a CAA record must follow the `<flag> <tag> <value>` pattern. Some validations are general for any content but there are special validations based on the specific value of the `tag` part.

### Validations

- The `flag` must be a number between `0` and `255`, and `0` is the value normally used
- The `tag` must be one of `issue`, `issuewild`, or `iodef`
- The `value` part:
  - It must be wrapped between double quotes `"` and be 255 characters long at most (including the double quotes `"`). 
  - Any inner double quotes `"` must be escaped with the `\"` character sequence. 
  - It must follow an extra set of rules based on the specific `tag` value, as follows

#### `issue` and `issuewild` tag `value`

- It must be either a domain name or a domain name followed by a `;` character and a list of `parameter`s separated by the `;` character.

   <info>
   Example: `0 issue "letsencrypt.com"`
   </info>

- Each parameter must follow the `key=value` pattern.

   <info>
   Example: `0 issue "letsencrypt.com;validationmethods=dns-01"`
   </info>
  
- The domain name can also be left empty, which must be indicated providing just a `;` character

   <info>
   Example: `0 issue ";"`
   </info>

#### `iodef` tag `value`

- It must contain a URL
- The provided URL must have one of the following schemes: `mailto`, `http`, or `https`
- If the URL has the `mailto` scheme, then it must be conform to an email URL as in `mailto:admin@example.com`
- If the URL has the `http` or `https` schemes, then it must be a valid HTTP/HTTPS URL as in `https://dnsimple.com/report_caa`

### Normalizations

Our system will only normalize the `value` of the provided CAA record content as follows:
- We will add the double quote `"` wrapper when you provide a `value` without it. While doing that, we will also escape any double quote `"` characters in the original `value`.

   <info>
   Example: `0 issue sectigo.com` turns into `0 issue "sectigo.com"`
   </info>

- If the `value` you provide is already wrapped in double quotes `"`, we won't perform any change on it.

### References

The reference document for the CAA records is the [RFC 8659](https://www.rfc-editor.org/rfc/rfc8659.html), sections `4.1.1`, `4.2`, `4.3`, and `4.4`




