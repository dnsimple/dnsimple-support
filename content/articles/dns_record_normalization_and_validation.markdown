---
title: DNS record normalization and validation policies
excerpt: This article contains details about how we normalize and validate DNS records.
categories:
- DNS
---

# DNS record normalization and validation policies

DNSimple is continuously working to enhance our adoption of industry-standards, which includes how we ingest, store, and serve all the DNS records in our system. This involves processes such as:
- Normalizing DNS record material to provided by our customers, coming from third-party systems, or automatically generated by our system to make them compliant with the industry-standard formats and semantics we support.
- Validating DNS record material to prevent duplicated or invalid records to be stored in our system.
- Providing meaningful feedback so that our users can understand what's wrong and fix it when our system can't take a safe decision.

Normalization and validation varies depending on the DNS record type, and this article explains how we address this based on it. 

## TXT records

TL;DR: The content must be wrapped in `"`, and inner `"` must be escaped with `\"` (we will do it for you if needed). Text wrapped in `"` can't be longer than 255 (including the `"` characters), but you can concatenate all longer TXT records.

### Validations

**The content must be wrapped in double quotes `"`**

Even though the relevant RFCs allow unwrapped values when they don't include whitespace characters, we enforce double quote `"` wrapped contents for better interoperability and to reduce the number of corner cases to consider.

Since the content must be wrapped in double quotes `"`, any double quote `"` characters in it must be escaped with the `\"` sequence. Note that the backslash doesn't have a special meaning otherwise `\` and can be freely used.

**Wrapped text can't be longer than 255 characters**

That's including the double quote `"` wrappers. However, many wrapped texts can be concatenated to achieve longer TXT records. No separator character is needed. 

This is an example of a valid 410 characters long TXT record content:

```
"v=DKIM1;t=s;p=MIIBIjANBgkqhkiG9w0BAQEFAAOCAQ8AMIIBCgKCAQEAr1vE7K6XAXKtID2wSBKpHW1cBCghiYvmry5vhYLySPltIpvYvzl5WGAgFTCcOF2QO8BLYvoihjr0oC84LjVt7xO3ZUaG3my3wWQcF0WObJwADl/GawBuum/4lcbJmlLHnqetfGR37WUG+t0NKK+Cz4xRkdtgYPZMYpmNirlhIwHWSNftqD6XI5DEA0LtwCb4gMa""hkWIKhTuukrVoYh58x7vI7g22AHheo+eypvcjx0SrQn9JnoVuL4mEin9FaSaLOGUah842fy3e21LOdB++yDxER4pha2hbpJHU5imcltOlsILPL1bvRlDaL9ZeN/Yjjyf3ZLEE0hgo94rrnXzM/QIDAQAB"
```

### Normalizations

Our system will add the double quote `"` wrapper when you provide a TXT content without it. While doing that, we will also escape any double quote `"` characters in the original TXT content.

If the TXT content you provide is already wrapped in double quotes `"`, we won't perform any change on it and validations will be executed on it verbatim.

#### References

The reference document for TXT record validations is the [RFC 1035](https://www.rfc-editor.org/rfc/rfc1035):

``` 

3.3. Standard RRs

                                      [...] <character-string> is a single
   length octet followed by that number of characters.  <character-string>
   is treated as binary information, and can be up to 256 characters in 
   length (including the length octet).

3.3.14. TXT RDATA format

   +--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+
   /                   TXT-DATA                    /
   +--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+
   
   where:
   
   TXT-DATA        One or more <character-string>s.
   
   TXT RRs are used to hold descriptive text.  The semantics of the text
   depends on the domain where it is found.

5.1. Format

   [...]
   
   <character-string> is expressed in one or two ways: as a contiguous set
   of characters without interior spaces, or as a string beginning with a "
   and ending with a ".  Inside a " delimited string any character can
   occur, except for a " itself, which must be quoted using \ (back slash).
```

## SPF records

TL;DR: Everything on [TXT records](#txt-records) apply to SPF records. On top of that, we will validate the directives and modifiers in the terms you provide.

### Validations

SPF records are built on top of TXT records, so all [TXT record validations](#validations) apply to SPF records as well.

On top of that, we will validate the directives and modifiers you provide through the terms in your SPF content. Each term must be either a `directive` or a `modifiers`. Terms are separated by a whitespace.

#### Directives

- A `directive` can start with a qualifier character. The supported qualifiers are: `+`, `-`, `?`, and `~`
- A `directive` is composed of a `mechanism` and and optional `value` (some `mechanism`s allow providing a value after a `:` character)
- This is the list of allowed `mechanism`s and their expected `value`s if any: 
  - `all`
  - `include`, `exists`. Expects a domain name as `value`
  - `ip4`. Expects an IPv4 address as `value`
  - `ip6`. Expects an IPv6 address as `value`
  - `ptr`. Expects a domain name as `value`
  - `a`, `mx`. Expects either a domain name or a CIDR as `value`

#### Modifiers

- `modifier` terms follow a `key=value` pattern
- A `modifier` key can be any valid text excluding the whitespace character
- A `modifier` value is expected to be a domain name

### Normalizations

Since SPF records are built on top of TXT records, all [TXT record normalizations](#normalizations) apply to SPF records as well.

No extra normalizations are performed on top of that.

### References

Even though SPF records are being officially replaced by TXT records, some providers still rely on them. To make the transition to TXT records as smooth as possible, the industry has decided to make it explicit and [RFC 7208](https://www.rfc-editor.org/rfc/rfc7208) would be the reference document in this case:

```
3.  SPF Records

   [...]

   The SPF record is expressed as a single string of text found in the
   RDATA of a single DNS TXT resource record; [...]
   
3.1.  DNS Resource Records

   SPF records MUST be published as a DNS TXT (type 16) Resource Record
   (RR) [RFC1035] only.  The character content of the record is encoded
   as [US-ASCII].  Use of alternative DNS RR types was supported in
   SPF's experimental phase but has been discontinued.

   In 2003, when SPF was first being developed, the requirements for
   assignment of a new DNS RR type were considerably more stringent than
   they are now.  Additionally, support for easy deployment of new DNS
   RR types was not widely deployed in DNS servers and provisioning
   systems.  As a result, developers of SPF found it easier and more
   practical to use the TXT RR type for SPF records.
   
4.6.1.  Term Evaluation

   There are two types of terms: mechanisms (defined in Section 5) and
   modifiers (defined in Section 6).  A record contains an ordered list
   of these as specified in the following Augmented Backus-Naur Form
   (ABNF).

   terms            = *( 1*SP ( directive / modifier ) )

   directive        = [ qualifier ] mechanism
   qualifier        = "+" / "-" / "?" / "~"
   mechanism        = ( all / include
                      / a / mx / ptr / ip4 / ip6 / exists )
   modifier         = redirect / explanation / unknown-modifier
   unknown-modifier = name "=" macro-string
                      ; where name is not any known modifier

   name             = ALPHA *( ALPHA / DIGIT / "-" / "_" / "." )

   Most mechanisms allow a ":" or "/" character after the name.

   Modifiers always contain an equals ('=') character immediately after
   the name, and before any ":" or "/" characters that might be part of
   the macro-string.

   Terms that do not contain any of "=", ":", or "/" are mechanisms, as
   defined in Section 5.

   As per the definition of the ABNF notation in [RFC5234], mechanism
   and modifier names are case-insensitive.

4.6.2.  Mechanisms

   Each mechanism is considered in turn from left to right.  If there
   are no more mechanisms, the result is the default result as described
   in Section 4.7.

   When a mechanism is evaluated, one of three things can happen: it can
   match, not match, or return an exception.

   If it matches, processing ends and the qualifier value is returned as
   the result of that record.  If it does not match, processing
   continues with the next mechanism.  If it returns an exception,
   mechanism processing ends and the exception value is returned.

   The possible qualifiers, and the results they cause check_host() to
   return, are as follows:

      "+" pass
      "-" fail
      "~" softfail
      "?" neutral

   The qualifier is optional and defaults to "+".

   When a mechanism matches and the qualifier is "-", then a "fail"
   result is returned and the explanation string is computed as
   described in Section 6.2.

   The specific mechanisms are described in Section 5.

4.6.3.  Modifiers

   Modifiers are not mechanisms.  They do not return match or not-match.
   Instead, they provide additional information.  Although modifiers do
   not directly affect the evaluation of the record, the "redirect"
   modifier has an effect after all the mechanisms have been evaluated.
```











